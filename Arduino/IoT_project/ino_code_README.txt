회로 구성

앰프+스피커 모듈
VIN (5V)
GND
pin: D25 (25번 핀: DAC 출력 가능) (25, 26 가능)

심박수 센서
VIN (5V)
GND
pin: VP (A0 핀: Analog input)

온도 센서
3.3V
3.3vin, gnd, SCL : 22번, SDA, 21번 핀

---------------------------------------
MP3 파일 ESP32에 넣는 방법

플러그인 설치 (아두이노 IDE에 Tools 메뉴에 ESP32 Sketch Data Upload 가 생긴거 까지만 확인하면 됨)
https://m.blog.naver.com/chcbaram/221416603068

MP3 파일 저장하기
https://blog.naver.com/mapes_khkim/222503797310
https://www.youtube.com/watch?v=m8QATElye_g

여기 나오는 라이브러리 2개도 설치해야 함

Upload 할 때 boot 버튼 눌러야되고 Upload 끝나면 reset 누를 필요 X
여기까지가 MP3 파일 ESP32에 넣는거

이제 코드 컴파일해서 업로드하면 끝


mp3파일
iotAbnormalAlarmSound.mp3
(건강 이상이 감지되었습니다.. 어플을 확인해 주세요.)
(함수 파라미터: abnormalAlarmMP3)

iotNormalAlarmSound.mp3
(멍멍 몸 상태가 좋아요 멍멍)
(함수 파라미터: normalAlarmMP3)

iotFoodTimeSound.mp3
(멍멍 주인님 배고파요 밥주세요 멍멍)
(함수 파라미터: foodTimeAlarmMP3)

(재생될 때 처음에 터지는 듯한 소리
+ 재생 끝나고 나오는 잡음
+ 볼륨
은 일단 구현끝나고 수정해보겠음)

-----------------------------------------
추가적인 라이브러리 설치

수업 따라오면서 라이브러리 다 설치하고
위에 MP3 영상 따라하면서 라이브러리 설치했다는 가정 하에

온도 센서 라이브러리만 설치하면 됨.

라이브러리 MLX 검색해서
Adafruit_MLX90614 랑
Adafruit_MLX90614 Library 
둘 다 추가 (miniMLX 아님 밑으로 더 내리면 있음)

설치할 때 bus i/o 머시기 나오면
그냥 install all 하면 됨.



-----------------------------------------
개인 별로 코드 수정해야 하는 부분

WiFi 본인 거에 맞춰서 바꾸기

AWS 인증서 민호가 보내준거로 알아서 설정하기

심박 수 측정할 때 threshold 부분 본인 센서 값 보고 적당하게 수정하기
(실험할 때는 심박 수 측정해서 json으로 보내는 부분까지 주석처리하고
 mqtt로 실험하면 될듯 (센서 없는 사람들))


-------------------------------------
여기까지 하면 이제 코드 잘 돌아갈 거임


---------------------------------------------------------------------------------------------
이 아래는 추가하거나 수정해야할 것들

---------------------------------------
딥슬립 들어가는 순간

센싱하고 JSON 보낸 다음
알람 재생 끝난 다음

--------------------------------------
딥슬립 깨야하는 순간

센싱 시간 (esp32에 박아뒀고)
각종 알람시간 (esp32에 박아뒀음(

+


AWS에서 JSON 보내서 esp32에서 받아야 할 때
(어플에서 사용자가 알람 시간을 바꾸면 받아야 함)
==> 딥슬립에서 와이파이가 안되므로
그냥 1시간 주기로 깨우던가 해야할 듯
(너무 길면 10분 주기 이런 식으로 하기 (알람을 바꾸면 업데이트 되는 시간이 1시간이라 하면 너무 길 수 있음))
(앞에서 시연할 때에는 딥슬립 코드를 풀어 버리고 시연)

베스트는 버튼을 눌렀을 때 (or 전원을 켰을 때) 딥슬립 풀리게 해놓고
사용자에게 어플에서 알람 시간 설정을 바꿨으면
기기의 전원을 on/off (or 버튼 누르기) 해달라고
제품 설명에 써놓고 어플에서도 안내 메세지 띄워주는게 베스트일듯


-----------------------------------------------------
AWS 부분

shadow 사용

각종 모드 (건강 이상(정상), 밥 시간 알람) 관련은
state로
{
healthStatus: (이상: abnormal , 정상(default): normal  )

foodTime1: (int) (시간*60 + 분) (초기값(default): -1로 (알람 미설정)
foodTime2: 
foodTime3: 
foodTime4: 
foodTime5: 


sensing 값은
sensing으로
{
측정 월: 5	(int)
측정 일: 29	(int)
측정 시간: 7	(int)
온도: 36.xx	(long)
심박수: 80	(int)

}


이런식?

AWS에서 ESP32로 publish할 때에는 state 부분만 보내주면 될 듯.
어차피 sensing 데이터 자체는
esp32에 쭉 저장되거나 AWS에서 받을 이유가 없음



ESP32에서 publish 하는 부분은
AWS랑 맞춰서 수정해봐야 함.
일단 임의대로 작성해놓음.
+
shadow한테 delta 메세지 받은거대로 esp32 상태 바꾸고 난 다음에
바뀐 상태 다시 publish 하게 만들어 놓았음
(불필요하면 수정하면 됨)
+
일단 esp32 코드에서 shadow 이름은 chichiShadow로 설정해둠.
(코드 수정 시 참고)

-------------------------------------------------
esp32 + aws + 앱
다 잘 작동되면
코드 compact하게 정리하기
(불필요한 공백 및 주석 제거)


